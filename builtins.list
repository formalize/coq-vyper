# This is the list of built-in function prototypes adapted from:
#   https://docs.soliditylang.org/en/v0.8.6/yul.html
# 
# It is necessary because of this clause from the Yul spec:
#   "Expressions that are also statements (i.e. at the block level) have to evaluate to zero values."
# So if a builtin is called at the top level, the compiler must know if it returns 0 or 1 value.
# For example,
#   stop()
# is compiled as
#   stop()
# but
#   msize()
# is compiled as 
#   pop(msize())

# In the comments:
#
#   F - Frontier
#   H - Homestead
#   B - Byzantium
#   C - Constantinople
#   I - Istanbul
#
#   mem[a...b) signifies the bytes of memory starting at position a up to but not including position b
#   storage[p] signifies the storage contents at slot p
#
#   Most comments refer to argument names that unfortunately have been omitted from the table.
#   Also "See more" references were dropped.

stop()                                  # F     stop execution, identical to return(0, 0)

add(u256, u256)             -> u256     # F     x + y
sub(u256, u256)             -> u256     # F     x - y
mul(u256, u256)             -> u256     # F     x * y
div(u256, u256)             -> u256     # F     x / y or 0 if y == 0
sdiv(u256, u256)            -> u256     # F     x / y, for signed numbers in two’s complement, 0 if y == 0
mod(u256, u256)             -> u256     # F     x % y, 0 if y == 0
smod(u256, u256)            -> u256     # F     x % y, for signed numbers in two’s complement, 0 if y == 0
exp(u256, u256)             -> u256     # F     x to the power of y
not(u256)                   -> u256     # F     bitwise “not” of x (every bit of x is negated)
lt(u256, u256)              -> u256     # F     1 if x < y, 0 otherwise
gt(u256, u256)              -> u256     # F     1 if x > y, 0 otherwise
slt(u256, u256)             -> u256     # F     1 if x < y, 0 otherwise, for signed numbers in two’s complement
sgt(u256, u256)             -> u256     # F     1 if x > y, 0 otherwise, for signed numbers in two’s complement
eq(u256, u256)              -> u256     # F     1 if x == y, 0 otherwise
iszero(u256)                -> u256     # F     1 if x == 0, 0 otherwise
and(u256, u256)             -> u256     # F     bitwise “and” of x and y
or(u256, u256)              -> u256     # F     bitwise “or” of x and y
xor(u256, u256)             -> u256     # F     bitwise “xor” of x and y
byte(u256, u256)            -> u256     # F     nth byte of x, where the most significant byte is the 0th byte
shl(u256, u256)             -> u256     # C     logical shift left y by x bits
shr(u256, u256)             -> u256     # C     logical shift right y by x bits
sar(u256, u256)             -> u256     # C     signed arithmetic shift right y by x bits
addmod(u256, u256, u256)    -> u256     # F     (x + y) % m with arbitrary precision arithmetic, 0 if m == 0
mulmod(u256, u256, u256)    -> u256     # F     (x * y) % m with arbitrary precision arithmetic, 0 if m == 0
signextend(u256, u256)      -> u256     # F     sign extend from (i*8+7)th bit counting from least significant
keccak256(u256, u256)       -> u256     # F     keccak(mem[p...(p+n)))

pc()                        -> u256     # F     current position in code
pop(u256)                               # F     discard value x
mload(u256)                 -> u256     # F     mem[p...(p+32))
mstore(u256, u256)                      # F     mem[p...(p+32)) := v
mstore8(u256, u256)                     # F     mem[p] := v & 0xff (only modifies a single byte)

# Calling sload() and sstore() is forbidden because otherwise the compiler can give no guarantees.
sload(u256)                 -> u256     # F     storage[p]
sstore(u256, u256)                      # F     storage[p] := v

msize()                     -> u256     # F     size of memory, i.e. largest accessed memory index
gas()                       -> u256     # F     gas still available to execution
address()                   -> u256     # F     address of the current contract / execution context
balance(address)            -> u256     # F     wei balance at address a
selfbalance()               -> u256     # I     equivalent to balance(address()), but cheaper
caller()                    -> address  # F     call sender (excluding delegatecall)
callvalue()                 -> u256     # F     wei sent together with the current call
calldataload(u256)          -> u256     # F     call data starting from position p (32 bytes)
calldatasize()              -> u256     # F     size of call data in bytes
calldatacopy(u256, u256, u256)          # F     copy s bytes from calldata at position f to mem at position t

# It's not possible to model codesize() and codecopy() in the compiler since the code hasn't been compiled yet.
codesize()                  -> u256     # F     size of the code of the current contract / execution context
codecopy(u256, u256, u256)              # F     copy s bytes from code at position f to mem at position t
# For similar reasons extcodesize() and extcodecopy() should be forbidden.
extcodesize(address)        -> u256     # F     size of the code at address a
extcodecopy(address, u256, u256, u256)  # F     like codecopy(t, f, s) but take code at address a

returndatasize()            -> u256     # B     size of the last returndata
returndatacopy(u256, u256, u256)        # B     copy s bytes from returndata at position f to mem at position t
extcodehash(address)        -> u256     # C     code hash of address a

create(u256, u256, u256)    -> address  # F     create new contract with code mem[p...(p+n)) and send v wei and return the new address; returns 0 on error
create2(u256, u256, u256, u256) -> address          # C create new contract with code mem[p...(p+n)) at address keccak256(0xff . this . s . keccak256(mem[p...(p+n))) and send v wei and return the new address, where 0xff is a 1 byte value, this is the current contract’s address as a 20 byte value and s is a big-endian 256-bit value; returns 0 on error

call(u256, address, u256, u256, u256, u256, u256)       -> u256     # F call contract at address a with input mem[in…(in+insize)) providing g gas and v wei and output area mem[out…(out+outsize)) returning 0 on error (eg. out of gas) and 1 on success
callcode(u256, address, u256, u256, u256, u256, u256)   -> u256     # F identical to call but only use the code from a and stay in the context of the current contract otherwise
delegatecall(u256, address, u256, u256, u256, u256)     -> u256     # H identical to callcode but also keep caller and callvalue See more
staticcall(u256, address, u256, u256, u256, u256)       -> u256     # B identical to call(g, a, 0, in, insize, out, outsize) but do not allow state modifications

return(u256, u256)                          # F     end execution, return data mem[p...(p+s))
revert(u256, u256)                          # B     end execution, revert state changes, return data mem[p...(p+s))
selfdestruct(address)                       # F     end execution, destroy current contract and send funds to a
invalid()                                   # F     end execution with invalid instruction

log0(u256, u256)                            # F     log without topics and data mem[p...(p+s))
log1(u256, u256, u256)                      # F     log with topic t1 and data mem[p...(p+s))
log2(u256, u256, u256, u256)                # F     log with topics t1, t2 and data mem[p...(p+s))
log3(u256, u256, u256, u256, u256)          # F     log with topics t1, t2, t3 and data mem[p...(p+s))
log4(u256, u256, u256, u256, u256, u256)    # F     log with topics t1, t2, t3, t4 and data mem[p...(p+s))

chainid()                       -> u256     # I     ID of the executing chain (EIP 1344)
origin()                        -> u256     # F     transaction sender
gasprice()                      -> u256     # F     gas price of the transaction
blockhash(u256)                 -> u256     # F     hash of block nr b - only for last 256 blocks excluding current
coinbase()                      -> u256     # F     current mining beneficiary
timestamp()                     -> u256     # F     timestamp of the current block in seconds since the epoch
number()                        -> u256     # F     current block number
difficulty()                    -> u256     # F     difficulty of the current block
gaslimit()                      -> u256     # F     block gas limit of the current block
